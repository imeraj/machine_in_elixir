# MakingMachinesThatLearn

```elixir
Mix.install([
  {:axon, "~> 0.6.1"},
  {:nx, "~> 0.7.2"},
  {:explorer, "~> 0.8.2"},
  {:kino, "~> 0.12.3"}
])
```

## Section

```elixir
require Explorer.DataFrame, as: DF
```

<!-- livebook:{"output":true} -->

```
Explorer.DataFrame
```

```elixir
iris = Explorer.Datasets.iris()
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[150 x 5]
  sepal_length f64 [5.1, 4.9, 4.7, 4.6, 5.0, ...]
  sepal_width f64 [3.5, 3.0, 3.2, 3.1, 3.6, ...]
  petal_length f64 [1.4, 1.4, 1.3, 1.5, 1.4, ...]
  petal_width f64 [0.2, 0.2, 0.2, 0.2, 0.2, ...]
  species string ["Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", ...]
>
```

```elixir
cols = ~w(sepal_width sepal_length petal_length petal_width)

normalized_iris =
  DF.mutate(
    iris,
    for col <- across(^cols) do
      {col.name, (col - mean(col)) / variance(col)}
    end
  )
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[150 x 5]
  sepal_length f64 [-1.0840606189132322, -1.3757361217598405, -1.66741162460645,
   -1.8132493760297554, -1.2298983703365363, ...]
  sepal_width f64 [2.3722896125315045, -0.28722789030650403, 0.7765791108287005, 0.2446756102610982,
   2.9041931130991068, ...]
  petal_length f64 [-0.7576391687443839, -0.7576391687443839, -0.7897606710936369,
   -0.7255176663951307, -0.7576391687443839, ...]
  petal_width f64 [-1.7147014356654708, -1.7147014356654708, -1.7147014356654708,
   -1.7147014356654708, -1.7147014356654708, ...]
  species string ["Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", "Iris-setosa", ...]
>
```

```elixir
shuffled_normalized_iris = DF.shuffle(normalized_iris)
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[150 x 5]
  sepal_length f64 [-1.3757361217598405, 1.8326944095528606, -0.2090341103734036, 1.978532160976166,
   -0.5007096132200132, ...]
  sepal_width f64 [0.2446756102610982, -0.28722789030650403, -0.8191313908741062,
   0.7765791108287005, -3.4786488937121147, ...]
  petal_length f64 [-0.7255176663951307, 0.6878284369720075, 0.14176289703470407,
   0.7199499393212605, 0.013276887637691404, ...]
  petal_width f64 [-1.8864005113329076, 1.547581002015832, 0.17398839667633603, 1.032483775013521,
   -0.16940975465853786, ...]
  species string ["Iris-setosa", "Iris-virginica", "Iris-versicolor", "Iris-virginica",
   "Iris-versicolor", ...]
>
```

```elixir
train_df = DF.slice(shuffled_normalized_iris, 0..119)
test_df = DF.slice(shuffled_normalized_iris, 120..149)
```

<!-- livebook:{"output":true} -->

```
#Explorer.DataFrame<
  Polars[30 x 5]
  sepal_length f64 [-0.6465473646433173, -1.2298983703365363, 1.2493434038596427,
   -2.2507626302996693, 1.2493434038596427, ...]
  sepal_width f64 [-0.28722789030650403, 1.8403861119639024, 0.2446756102610982,
   -0.28722789030650403, 1.3084826113963002, ...]
  petal_length f64 [0.23812740408246344, -0.7255176663951307, 0.5914639299242479,
   -0.8540036757921433, 0.6235854322735012, ...]
  petal_width f64 [0.51738654801121, -1.7147014356654708, 2.0626782290181427, -1.8864005113329076,
   2.2343773046855797, ...]
  species string ["Iris-versicolor", "Iris-setosa", "Iris-virginica", "Iris-setosa",
   "Iris-virginica", ...]
>
```

```elixir
feature_columns = [
  "sepal_length",
  "sepal_width",
  "petal_length",
  "petal_width"
]

label_column = "species"

x_train = Nx.stack(train_df[feature_columns], axis: 1)

y_train =
  train_df
  |> DF.pull(label_column)
  |> Explorer.Series.to_list()
  |> Enum.map(fn
    "Iris-setosa" -> 0
    "Iris-versicolor" -> 1
    "Iris-virginica" -> 2
  end)
  |> Nx.tensor(type: :u8)
  |> Nx.new_axis(-1)
  |> Nx.equal(Nx.iota({1, 3}, axis: -1))

x_test = Nx.stack(test_df[feature_columns], axis: 1)

y_test =
  test_df
  |> DF.pull(label_column)
  |> Explorer.Series.to_list()
  |> Enum.map(fn
    "Iris-setosa" -> 0
    "Iris-versicolor" -> 1
    "Iris-virginica" -> 2
  end)
  |> Nx.tensor(type: :u8)
  |> Nx.new_axis(-1)
  |> Nx.equal(Nx.iota({1, 3}, axis: -1))
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u8[30][3]
  [
    [0, 1, 0],
    [1, 0, 0],
    [0, 0, 1],
    [1, 0, 0],
    [0, 0, 1],
    [0, 0, 1],
    [0, 1, 0],
    [1, 0, 0],
    [0, 1, 0],
    [1, 0, 0],
    [0, 0, 1],
    [0, 0, 1],
    [0, 1, 0],
    [0, 1, 0],
    [0, 1, 0],
    [1, 0, 0],
    [1, 0, ...],
    ...
  ]
>
```

```elixir
model =
  Axon.input("iris_features")
  |> Axon.dense(3, activation: :softmax)
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"iris_features" => nil}
  outputs: "softmax_0"
  nodes: 3
>
```

```elixir
Axon.Display.as_graph(model, Nx.template({1, 4}, :f32))
```

<!-- livebook:{"output":true} -->

```mermaid
graph TD;
3[/"iris_features (:input) {1, 4}"/];
4["dense_0 (:dense) {1, 3}"];
5["softmax_0 (:softmax) {1, 3}"];
4 --> 5;
3 --> 4;
```

```elixir
data_stream =
  Stream.repeatedly(fn ->
    {x_train, y_train}
  end)
```

<!-- livebook:{"output":true} -->

```
#Function<51.53678557/2 in Stream.repeatedly/1>
```

```elixir
trained_model_state =
  model
  |> Axon.Loop.trainer(:categorical_cross_entropy, :sgd)
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.run(data_stream, %{}, iterations: 500, epoch: 5)
```

<!-- livebook:{"output":true} -->

```

07:14:27.468 [debug] Forwarding options: [epoch: 5] to JIT compiler
Epoch: 0, Batch: 450, accuracy: 0.8574664 loss: 0.4372455
```

<!-- livebook:{"output":true} -->

```
%{
  "dense_0" => %{
    "bias" => #Nx.Tensor<
      f32[3]
      [-0.10949337482452393, 0.20468588173389435, -0.09519241750240326]
    >,
    "kernel" => #Nx.Tensor<
      f32[4][3]
      [
        [-0.3295602798461914, -0.2955125570297241, 0.1478976607322693],
        [0.06870780885219574, -0.7769036889076233, -0.43949371576309204],
        [-0.823157548904419, 0.7721400856971741, 0.3501961827278137],
        [-0.6105000972747803, 0.01306556724011898, 1.1404552459716797]
      ]
    >
  }
}
```

```elixir
data = [{x_test, y_test}]

model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(data, trained_model_state)
```

<!-- livebook:{"output":true} -->

```
Batch: 0, accuracy: 0.8333333
```

<!-- livebook:{"output":true} -->

```
%{
  0 => %{
    "accuracy" => #Nx.Tensor<
      f32
      0.8333333134651184
    >
  }
}
```
