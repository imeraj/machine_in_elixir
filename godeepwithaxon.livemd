# GoDeepWithAxon

```elixir
Mix.install([
  {:nx, "~> 0.7.2"},
  {:axon, "~> 0.6.1"},
  {:exla, "~> 0.7.2"},
  {:scidata, "~> 0.1.11"},
  {:kino, "~> 0.12.3"},
  {:table_rex, "~> 3.1.1"}
])
```

## Using Nx to Create Neural Network

```elixir
# Nx.default_backend(EXLA.Backend)
```

```elixir
defmodule NeuralNetwork do
  import Nx.Defn

  defn dense(input, weight, bias) do
    input
    |> Nx.dot(weight)
    |> Nx.add(bias)
  end

  defn activation(input) do
    Nx.sigmoid(input)
  end

  defn hidden(input, weight, bias) do
    input
    |> dense(weight, bias)
    |> activation()
  end

  defn output(input, weight, bias) do
    input
    |> dense(weight, bias)
    |> activation()
  end

  defn predict(input, w1, b1, w2, b2) do
    input
    |> hidden(w1, b1)
    |> output(w2, b2)
  end
end
```

```elixir
key = Nx.Random.key(42)
{w1, new_key} = Nx.Random.uniform(key)
{b1, new_key} = Nx.Random.uniform(new_key)
{w2, new_key} = Nx.Random.uniform(new_key)
{b2, new_key} = Nx.Random.uniform(new_key)
```

```elixir
Nx.Random.uniform(new_key)
|> elem(0)
|> NeuralNetwork.predict(w1, b1, w2, b2)
```

Neural Network with Axon

```elixir
{images, labels} = Scidata.MNIST.download()
```

```elixir
{image_data, image_type, image_shape} = images
{label_data, label_type, label_shape} = labels
```

```elixir
images =
  image_data
  |> Nx.from_binary(image_type)
  |> Nx.divide(255)
  |> Nx.reshape({60000, :auto})
```

```elixir
labels =
  label_data
  |> Nx.from_binary(label_type)
  |> Nx.reshape(label_shape)
  |> Nx.new_axis(-1)
  |> Nx.equal(Nx.iota({1, 10}))
```

```elixir
train_range = 0..49_999//1
test_range = 50_000..-1//1
```

```elixir
train_images = images[train_range]
train_labels = labels[train_range]
```

```elixir
test_images = images[test_range]
test_labels = labels[test_range]
```

```elixir
batch_size = 64

train_image_batches =
  train_images
  |> Nx.to_batched(batch_size)

train_label_batches =
  train_labels
  |> Nx.to_batched(batch_size)

train_data = Stream.zip(train_image_batches, train_label_batches)
```

```elixir
test_image_batches =
  test_images
  |> Nx.to_batched(batch_size)

test_label_batches =
  test_labels
  |> Nx.to_batched(batch_size)

test_data = Stream.zip(test_image_batches, test_label_batches)
```

```elixir
model =
  Axon.input("images", shape: {nil, 784})
  |> Axon.dense(128, activation: :relu)
  |> Axon.dense(10, activation: :softmax)
```

```elixir
template = Nx.template({1, 784}, :f32)
Axon.Display.as_graph(model, template)
```

```elixir
Axon.Display.as_table(model, template)
|> IO.puts()
```

```elixir
IO.inspect(model, structs: false)
```

```elixir
trained_model_state =
  model
  |> Axon.Loop.trainer(:categorical_cross_entropy, :sgd)
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.run(train_data, %{}, epochs: 10, compiler: EXLA)
```

```elixir
model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(test_data, trained_model_state, compiler: EXLA)
```

```elixir
{test_batch, _} = Enum.at(test_data, 0)
```

```elixir
test_image = test_batch[0]
```

```elixir
test_image
|> Nx.reshape({28, 28})
|> Nx.to_heatmap()
```

```elixir
{_, predict_fn} = Axon.build(model, compiler: EXLA)
```

```elixir
probabilities =
  test_image
  |> Nx.new_axis(0)
  |> then(&predict_fn.(trained_model_state, &1))
  |> Nx.argmax()
```
